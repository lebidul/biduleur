name: Build and Release - Bidul

on:
  push:
    tags:
      - 'v*' # Se déclenche quand un tag (ex: v1.0.1) est poussé
  workflow_dispatch: # Permet de le lancer manuellement
    inputs:
      version:
        description: 'Version (ex: 1.2.3). Laisser vide pour auto-incrémenter.'
        required: false

jobs:
  build-release:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Nécessaire pour l'historique des tags

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller==6.6.0
          pip install -r biduleur/requirements.txt
          pip install -r misenpageur/requirements.txt

      # ====================================================================
      #           Étape 1 : Logique de Version Corrigée et Simplifiée
      # ====================================================================
      - name: Determine Version
        id: versioning
        shell: pwsh
        run: |
          # Si un tag a déclenché le workflow, on utilise ce tag.
          if ("${{ github.ref_type }}" -eq "tag") {
            $version = "${{ github.ref_name }}".TrimStart("v")
          }
          # Si lancé manuellement avec une version, on l'utilise.
          elseif ("${{ github.event.inputs.version }}") {
            $version = "${{ github.event.inputs.version }}"
          }
          # Sinon (push sur master), on auto-incrémente.
          else {
            $latest_tag = git describe --tags --abbrev=0 2>$null
            if ($latest_tag) {
              $version_parts = $latest_tag.TrimStart("v").Split(".")
              $new_patch = [int]$version_parts[2] + 1
              $version = "$($version_parts[0]).$($version_parts[1]).$new_patch"
            } else {
              # Aucun tag n'existe, on commence à 1.0.0
              $version = "1.0.0"
            }
          }
          echo "Determined Version: $version"
          "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append
      # ====================================================================

      - name: Update version file
        shell: pwsh
        run: |
          (Get-Content -Path bidul_version_info.txt -Raw).Replace("1.0.0", "${{ env.VERSION }}") `
            | Set-Content -Path bidul_version_info.txt

      - name: Build with PyInstaller
        run: pyinstaller bidul.spec --clean --noconfirm

      - name: Package release artifact
        shell: pwsh
        run: |
          # Le nom du dossier de sortie est défini par PyInstaller (ici, 'bidul')
          $sourceFolder = "dist/bidul"
          $zipFileName = "bidul-${{ env.VERSION }}-win64.zip"
          
          # Créer l'archive ZIP
          Compress-Archive -Path "$sourceFolder/*" -DestinationPath $zipFileName
          echo "ZIP_NAME=$zipFileName" | Out-File -FilePath $env:GITHUB_ENV -Append

      # ====================================================================
      #               Étape 2 : Upload de l'artefact ZIP
      # ====================================================================
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: bidul-windows-build-${{ env.VERSION }}
          path: ${{ env.ZIP_NAME }}
          retention-days: 7 # Garde l'artefact pendant 7 jours
      # ====================================================================

      - name: Create Release
        # On ne crée une release que si c'est un push sur un tag
        if: github.event_name == 'push' && github.ref_type == 'tag'
        uses: softprops/action-gh-release@v2
        with:
          name: Bidul ${{ env.VERSION }}
          tag_name: ${{ github.ref_name }}
          files: ${{ env.ZIP_NAME }}
          body: |
            Version ${{ env.VERSION }} de Bidul.
            - Téléchargez le fichier `bidul-${{ env.VERSION }}-win64.zip` ci-dessous.
            - Décompressez l'archive.
            - Lancez `bidul.exe`.
