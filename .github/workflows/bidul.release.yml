name: Build and Release - Bidul

on:
  push:
    tags:
      - 'bidul-v*' # Se déclenche UNIQUEMENT quand un tag est poussé

jobs:
  build-release:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller==6.6.0
          pip install -r biduleur/requirements.txt
          pip install -r misenpageur/requirements.txt

      # ==================== LOGIQUE DE VERSION SIMPLIFIÉE ====================
      - name: Determine Version from Tag
        id: versioning
        shell: pwsh
        run: |
          # La version est simplement le nom du tag, sans le "v"
          $version = "${{ github.ref_name }}".TrimStart("v")
          echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append
      # =====================================================================

      - name: Update version file
        shell: pwsh
        run: |
          (Get-Content -Path bidul_version_info.txt -Raw).Replace("1.0.0", "${{ env.VERSION }}") `
            | Set-Content -Path bidul_version_info.txt

      - name: Build with PyInstaller
        run: pyinstaller bidul.spec --clean --noconfirm

      - name: Package release artifact
        id: package # ON AJOUTE UN ID À L'ÉTAPE
        shell: pwsh
        run: |
          $version = "${{ env.VERSION }}"
          $sourceFolder = "dist/bidul"
          $zipFileName = "bidul-${version}-win64.zip"
          
          # Créer le README
          $readmeContent = @"
          Bidul v$version
          ==============================================
          Merci d'utiliser Bidul !
          "@
          $readmeContent | Out-File -FilePath "$sourceFolder/README.txt" -Encoding utf8
          
          # Copier les notes de version
          if (Test-Path "RELEASE_NOTES.md") {
            Copy-Item -Path "RELEASE_NOTES.md" -Destination "$sourceFolder/"
          }
          
          # Créer l'archive ZIP
          Compress-Archive -Path "$sourceFolder/*" -DestinationPath $zipFileName -Force
          
          echo "zip_name=$zipFileName" | Out-File -FilePath $env:GITHUB_OUTPUT

#      - name: Upload Build Artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: bidul-windows-build-${{ env.VERSION }}
#          path: ${{ env.ZIP_NAME }}
#          retention-days: 7

      - name: Get Release Notes
        id: get_release_notes
        shell: pwsh
        run: |
          $version = "${{ env.VERSION }}"
          $notes_file = "RELEASE_NOTES.md"
          $release_notes = "Pas de notes de version trouvées pour la version $version."
          
          if (Test-Path $notes_file) {
            $content = Get-Content -Path $notes_file -Raw
            $pattern = "(?s)## \[$version\](.*?)(?=## \[|\Z)"
            $match = [regex]::Match($content, $pattern)
            
            if ($match.Success) {
              $release_notes = $match.Groups[1].Value.Trim()
            }
          }
          
          $release_notes = $release_notes.Replace('%', '%25').Replace("`n", '%0A').Replace("`r", '%0D')
          echo "RELEASE_NOTES=$release_notes" | Out-File -FilePath $env:GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: Bidul v${{ env.VERSION }}
          tag_name: ${{ github.ref_name }}
          # ==================== LA CORRECTION EST ICI ====================
          # On utilise la sortie de l'étape "package"
          files: ${{ steps.package.outputs.zip_name }}
          # =============================================================
          body: ${{ steps.get_release_notes.outputs.RELEASE_NOTES }}