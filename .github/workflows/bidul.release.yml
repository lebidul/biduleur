name: Build and Release - Bidul

on:
  push:
    branches:
      - master # Se déclenche à chaque push/merge sur master
  workflow_dispatch:
    inputs:
      version:
        description: 'Version à construire (ex: 1.2.3)'
        required: false

jobs:
  build-release:
    runs-on: windows-latest

    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller==6.6.0
          pip install -r biduleur/requirements.txt
          pip install -r misenpageur/requirements.txt

      - name: Determine Version
        id: versioning
        shell: pwsh
        run: |
          $version = "0.0.0"
          $tag_name = "v0.0.0"
          
          # CAS 1 : C'est un push sur master
          if ("${{ github.event_name }}" -eq "push" -and "${{ github.ref_name }}" -eq "master") {
            $latest_tag = git describe --tags --abbrev=0 2>$null
            if ($latest_tag) {
              $version_parts = $latest_tag.TrimStart("v").Split(".")
              $new_patch = [int]$version_parts[2] + 1
              $version = "$($version_parts[0]).$($version_parts[1]).$new_patch"
            } else {
              $version = "1.0.0"
            }
          }
          # CAS 2 : C'est un lancement manuel
          else {
            $version = "${{ github.event.inputs.version }}"
          }
          
          $tag_name = "v$version"
          echo "Determined Version: $version"
          echo "Determined Tag: $tag_name"

          "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append
          "TAG=$tag_name" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Update version file
        shell: pwsh
        run: |
          (Get-Content -Path bidul_version_info.txt -Raw).Replace("1.0.0", "${{ env.VERSION }}") `
            | Set-Content -Path bidul_version_info.txt

      - name: Build with PyInstaller
        run: pyinstaller bidul.spec --clean --noconfirm

      - name: Package release artifact
        shell: pwsh
        run: |
          $version = "${{ env.VERSION }}"
          $sourceFolder = "dist/bidul"
          $zipFileName = "bidul-${version}-win64.zip"
          
          # 1. Supprimer le fichier de log de débogage s'il existe
          if (Test-Path "$sourceFolder/debug_log.txt") {
            Remove-Item "$sourceFolder/debug_log.txt"
            echo "debug_log.txt supprimé."
          }
          
          # 2. Créer le fichier README.txt
          $readmeContent = @"
          Bidul v$version
          ==============================================
          
          Merci d'utiliser Bidul !
          
          INSTRUCTIONS:
          1. Décompressez cette archive.
          2. Ouvrez le dossier "bidul" qui vient d'être créé.
          3. Double-cliquez sur bidul.exe pour lancer l'application.
          
          Pour plus de détails, consultez le fichier RELEASE_NOTES.md.
          "@
          $readmeContent | Out-File -FilePath "$sourceFolder/README.txt" -Encoding utf8
          
          # 3. Copier le fichier RELEASE_NOTES.md
          if (Test-Path "RELEASE_NOTES.md") {
            Copy-Item -Path "RELEASE_NOTES.md" -Destination "$sourceFolder/"
          }
          
          # 4. Créer une archive ZIP "plate"
          # On se place dans le dossier parent (dist) pour que le chemin source soit "bidul"
          Set-Location -Path "dist"
          Compress-Archive -Path "bidul" -DestinationPath "../$zipFileName" -Force
          Set-Location -Path ".." # Revenir à la racine
          
          echo "ZIP_NAME=$zipFileName" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: bidul-windows-build-${{ env.VERSION }}
          path: ${{ env.ZIP_NAME }}
          retention-days: 7

      - name: Get Release Notes
        id: get_release_notes
        shell: pwsh
        run: |
          $version = "${{ env.VERSION }}"
          $notes_file = "RELEASE_NOTES.md"
          $release_notes = "Pas de notes de version trouvées pour la version $version."
          
          if (Test-Path $notes_file) {
            $content = Get-Content -Path $notes_file -Raw
            $pattern = "(?s)## \[$version\](.*?)(?=## \[|\Z)"
            $match = [regex]::Match($content, $pattern)
            
            if ($match.Success) {
              $release_notes = $match.Groups[1].Value.Trim()
            }
          }
          
          $release_notes = $release_notes.Replace('%', '%25').Replace("`n", '%0A').Replace("`r", '%0D')
          echo "RELEASE_NOTES=$release_notes" | Out-File -FilePath $env:GITHUB_OUTPUT

      - name: Commit, Tag, and Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"
          
          git add bidul_version_info.txt
          # Le fichier VERSION n'est plus utilisé, on ne le commite pas.
          
          # On vérifie s'il y a des changements à commiter
          if (-not $(git status --porcelain)) {
            echo "No changes to commit."
          } else {
            git commit -m "chore(release): Update version info for ${{ env.TAG }}"
            git push
          }

          git tag ${{ env.TAG }}
          git push origin ${{ env.TAG }}

      - name: Create Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        uses: softprops/action-gh-release@v2
        with:
          name: Bidul ${{ env.TAG }}
          tag_name: ${{ env.TAG }}
          files: ${{ env.ZIP_NAME }}
          body: ${{ steps.get_release_notes.outputs.RELEASE_NOTES }}