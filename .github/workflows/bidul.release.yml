name: Build and Release - Bidul

on:
  # 1. Se déclenche quand un tag comme "bidul-v1.2.3" est poussé
  push:
    tags:
      - 'bidul-v*'
  # 2. Permet un déclenchement manuel depuis l'onglet "Actions" de GitHub
  workflow_dispatch:

jobs:
  build-release:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller==6.6.0
          pip install -r biduleur/requirements.txt
          pip install -r misenpageur/requirements.txt

      - name: Determine Version
        id: versioning
        shell: pwsh
        run: |
          # Si le workflow est déclenché par un tag (push)...
          if ("${{ github.event_name }}" -eq "push") {
            $version = ("${{ github.ref_name }}".Split('-')[1]).TrimStart('v')
            echo "Version de release détectée : $version"
          } 
          # Sinon (déclenchement manuel)...
          else {
            $branch = "${{ github.ref_name }}".Replace('/', '-') # Nettoie les noms de branche
            $sha = "${{ github.sha }}".Substring(0, 7)
            $version = "MANUAL-$branch-$sha"
            echo "Version de build manuel détectée : $version"
          }
          echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Update version file
        shell: pwsh
        run: |
          # Attention: Cette ligne peut échouer si le build manuel est lancé et que le fichier ne contient pas "1.0.0"
          (Get-Content -Path bidul_version_info.txt -Raw).Replace("1.0.0", "${{ env.VERSION }}") `
            | Set-Content -Path bidul_version_info.txt

      - name: Build with PyInstaller
        run: pyinstaller bidul.spec --clean --noconfirm

      - name: Package artifact
        id: package
        shell: pwsh
        run: |
          $version = "${{ env.VERSION }}"
          $sourceFolder = "dist/bidul"
          $zipFileName = "bidul-${version}-win64.zip"
          
          # Copie des fichiers additionnels (README, etc.)
          if (Test-Path "RELEASE_NOTES.md") {
            Copy-Item -Path "RELEASE_NOTES.md" -Destination "$sourceFolder/"
          }
          
          # Création de l'archive
          Compress-Archive -Path "$sourceFolder/*" -DestinationPath $zipFileName -Force
          
          echo "zip_name=$zipFileName" | Out-File -FilePath $env:GITHUB_OUTPUT

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: bidul-windows-build-${{ env.VERSION }}
          path: ${{ steps.package.outputs.zip_name }}
          retention-days: 7

      # ==================== ÉTAPES CONDITIONNELLES POUR LA RELEASE ====================
      # Ces étapes ne s'exécuteront que si le workflow a été déclenché par un PUSH de TAG.

      - name: Extract Release Notes
        if: github.event_name == 'push'
        id: get_release_notes
        shell: pwsh
        run: |
          $notes_file = "RELEASE_NOTES.md"
          $version = "${{ env.VERSION }}"
          $output_file = "current_release_notes.md" # Fichier de sortie temporaire
          $release_body = "Pas de notes de version trouvées pour la v$version."

          if (Test-Path $notes_file) {
            $content = Get-Content -Path $notes_file -Raw
            
            # La regex reste la même, elle est correcte
            $pattern = "(?s)# Bidul v$version(.*?)(?=# Bidul v|\z)"
            $match = [regex]::Match($content, $pattern)
            
            if ($match.Success) {
              $release_body = $match.Groups.Value.Trim()
            }
          }
          
          # On écrit le contenu propre dans le fichier temporaire
          Set-Content -Path $output_file -Value $release_body -Encoding utf8
          
          # On définit le chemin du fichier comme une sortie de l'étape
          echo "notes_path=$output_file" | Out-File -FilePath $env:GITHUB_OUTPUT

      - name: Create Release
        if: github.event_name == 'push'
        uses: softprops/action-gh-release@v2
        with:
          name: Bidul v${{ env.VERSION }}
          tag_name: ${{ github.ref_name }}
          files: ${{ steps.package.outputs.zip_name }}
          # On utilise 'body_path' pour lire directement le fichier
          body_path: ${{ steps.get_release_notes.outputs.notes_path }}