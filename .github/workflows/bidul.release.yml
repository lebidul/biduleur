name: Build and Release - Bidul

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      version:
        description: 'Version à construire (ex: 1.2.3)'
        required: true
        default: '1.0.0'

jobs:
  build-release:
    runs-on: windows-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller==6.6.0
          pip install -r biduleur/requirements.txt
          pip install -r misenpageur/requirements.txt
          
      # ==================== NOUVELLE ÉTAPE DE DÉBOGAGE ====================
      - name: List files for debugging
        run: |
          echo "--- Current Directory ---"
          ls -R
          echo "--- End of File List ---"

      - name: Determine Version
        id: versioning
        shell: pwsh
        run: |
          $version = "0.0.0"
          $tag_name = "v0.0.0"
          
          # Si c'est un push sur master, on auto-incrémente
          if ("${{ github.event_name }}" -eq "push") {
            $latest_tag = git describe --tags --abbrev=0 2>$null
            if ($latest_tag) {
              $version_parts = $latest_tag.TrimStart("v").Split(".")
              $new_patch = [int]$version_parts[2] + 1
              $version = "$($version_parts[0]).$($version_parts[1]).$new_patch"
            } else {
              $version = "1.0.0" # Premier tag si aucun n'existe
            }
          }
          # Si c'est un lancement manuel, on utilise la version fournie
          else {
            $version = "${{ github.event.inputs.version }}"
          }
          
          $tag_name = "v$version"
          echo "Determined Version: $version"
          echo "Determined Tag: $tag_name"

          "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append
          "TAG=$tag_name" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Update version file
        shell: pwsh
        run: |
          (Get-Content -Path bidul_version_info.txt -Raw).Replace("1.0.0", "${{ env.VERSION }}") `
            | Set-Content -Path bidul_version_info.txt

      - name: Build with PyInstaller
        run: pyinstaller bidul.spec --clean --noconfirm

      - name: Package release artifact
        id: package
        shell: pwsh
        run: |
          $version = "${{ env.VERSION }}"
          $sourceFolder = "dist/bidul"
          $zipFileName = "bidul-${version}-win64.zip"

          # On s'assure que le dossier source existe
          if (-not (Test-Path $sourceFolder)) {
            Write-Error "Le dossier de build '$sourceFolder' n'a pas été trouvé !"
            exit 1
          }

          # ==================== CORRECTION ZIP ====================
          # On compresse directement le dossier, mais on s'assurera
          # que l'utilisateur sait qu'il doit ouvrir le dossier "bidul" à l'intérieur.
          # C'est plus simple et plus robuste.
          Compress-Archive -Path $sourceFolder -DestinationPath $zipFileName -Force
          # ======================================================

          echo "ZIP_NAME=$zipFileName" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: bidul-windows-build-${{ env.VERSION }}
          path: ${{ env.ZIP_NAME }}
          retention-days: 7

#      - name: Upload Build Folder for Debugging
#        uses: actions/upload-artifact@v4
#        with:
#          name: bidul-windows-build-folder
#          path: dist/bidul/ # On téléverse le dossier complet```


      - name: Get Release Notes
        id: get_release_notes
        shell: pwsh
        run: |
          $version = "${{ env.VERSION }}"
          $notes_file = "RELEASE_NOTES.md"
          $release_notes = "Pas de notes de version trouvées pour la version $version."
          
          if (Test-Path $notes_file) {
            $content = Get-Content -Path $notes_file -Raw
            $pattern = "(?s)## \[$version\](.*?)(?=## \[|\Z)"
            $match = [regex]::Match($content, $pattern)
            
            if ($match.Success) {
              $release_notes = $match.Groups[1].Value.Trim()
            }
          }
          
          $release_notes = $release_notes.Replace('%', '%25').Replace("`n", '%0A').Replace("`r", '%0D')
          echo "RELEASE_NOTES=$release_notes" | Out-File -FilePath $env:GITHUB_OUTPUT

      - name: Commit and Push Version Bump and Tag
        # On ne fait cela QUE pour les push sur master
        if: github.event_name == 'push'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"
          
          # Mettre à jour le fichier VERSION avec le nouveau numéro
          # Cette étape a été supprimée, car le tag est maintenant la source de vérité
          
          # Créer et pousser le tag
          git tag ${{ env.TAG }}
          git push origin ${{ env.TAG }}
          
          # Commiter le changement de version dans bidul_version_info.txt
          git add bidul_version_info.txt
          git commit -m "chore(release): Prepare for release ${{ env.TAG }}"
          git push

      - name: Create Release
        # On ne crée une release que pour les push sur master
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        uses: softprops/action-gh-release@v2
        with:
          name: Bidul ${{ env.TAG }}
          tag_name: ${{ env.TAG }}
          files: ${{ env.ZIP_NAME }}
          body: ${{ steps.get_release_notes.outputs.RELEASE_NOTES }}
      # =============================================================